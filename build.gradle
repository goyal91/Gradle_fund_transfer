buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'com.innoviti.retail.fundTransfer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

bootJar {
    baseName = 'fundTransfer-service'
    version =  '0.1.0'
}


repositories {
    mavenCentral()
}


ext {
    springStatemachineVersion = '2.0.1.RELEASE'
}

dependencies {

    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.apache.poi:poi:3.17')
    compile("org.apache.poi:poi-ooxml:3.17")
    compile('javax.mail:mail:1.4.7')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.retry:spring-retry')
    compile('mysql:mysql-connector-java:5.1.6')
    compile('org.springframework.boot:spring-boot-configuration-processor')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.statemachine:spring-statemachine-bom:${springStatemachineVersion}"
    }
}


task createFolder {

	def configDir = new File(project.buildDir.path+"/libs", "config")	
	def libDir = new File(project.buildDir.path+"/libs", "lib")	

	delete libDir	
	delete configDir
	
	libDir.mkdirs()
	configDir.mkdirs()
}

task copyLib(type: Copy) {
	into project.buildDir.path+"/libs/lib"
	from configurations.compile
}

task copyConfig(type: Copy) {
	into project.buildDir.path+"/libs/config"
	from "config"
}


task bundleAll(type: Jar){
    dependsOn 'createFolder', 'copyLib', 'copyConfig'

  	manifest {
        def manifestClasspath = configurations.compile.collect { "lib/" + it.getName() }.join(' ') 
            attributes 'Implementation-Title': 'fund-transfer-service', 
                    'Implementation-Version': version,
                    'Main-Class': 'com.innoviti.retail.fundTransfer.starter.FundTransferDetailsApplication',
                    'Class-Path': manifestClasspath
    }
    baseName=project.name
    from { (configurations.compile - configurations.compile).collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
}

task zip(type: Zip){
    dependsOn 'bundleAll'
    from 'build/libs'
}